{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setData","fetch","concat","state","query","then","res","json","result","console","log","map","val","idx","content","split","book","chap","verse","key","id","setState","data","title","dataIndex","_this2","Header","Layout","Content","react_default","a","createElement","layout","className","color","row","col","span","input","placeholder","onChange","e","target","value","es_button","type","onClick","table","columns","getColumns","dataSource","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUA+EeA,sBAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBRQ,QAAU,WACRC,MAAK,qCAAAC,OAAsCT,EAAKU,MAAMC,QACnDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLC,QAAQC,IAAIF,GACZA,EAASA,EAAOG,IAAI,SAACC,EAAKC,GACxB,IAAIC,EAAUF,EAAIG,MAAM,aAAa,GAAGA,MAAM,MAAM,GAChDC,EAAOJ,EAAIG,MAAM,UAAU,GAAGA,MAAM,MAAM,GAC1CE,EAAOL,EAAIG,MAAM,UAAU,GAAGA,MAAM,MAAM,GAC1CG,EAAQN,EAAIG,MAAM,WAAW,GAAGA,MAAM,MAAM,GAEhD,MAAO,CACLI,IAAKN,EACLO,GAAE,GAAAlB,OAAKc,GAALd,OAAYe,EAAZ,KAAAf,OAAoBgB,GACtBJ,QAASA,KAKbrB,EAAK4B,SAAS,CAAEC,KAAMd,OAvC1Bf,EAAKU,MAAQ,CACXmB,KAAM,GACNlB,MAAO,IAJQX,4EAmBjB,MAVc,CAAC,CACb8B,MAAO,eACPC,UAAW,KACXL,IAAK,MACJ,CACDI,MAAO,eACPC,UAAW,UACXL,IAAK,6CA6BA,IAAAM,EAAA7B,KACC8B,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,UAAU,UAChBJ,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAAOJ,EAAAC,EAAAC,cAAA,QAAMG,MAAM,SAAZ,mBAExBL,EAAAC,EAAAC,cAACH,EAAD,KACEC,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,IACTR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,YAAY,uCAASC,SAAU,SAAAC,GAAC,OAAIhB,EAAKJ,SAAS,CAACjB,MAAOqC,EAAEC,OAAOC,YAG5Ed,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,GACTR,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAASlD,KAAKI,SAArC,kBAGJ6B,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,KAAM,IACTR,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,QAASpD,KAAKqD,aAAcC,WAAYtD,KAAKO,MAAMmB,kBAjEtD6B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.86973556.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layout, Input, Row, Col, Button, Table } from 'antd';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      query: ''\n    }\n  }\n\n  getColumns() {\n    let columns = [{\n      title: '章節',\n      dataIndex: 'id',\n      key: 'id',\n    }, {\n      title: '內容',\n      dataIndex: 'content',\n      key: 'content',\n    }]\n\n    return columns\n  }\n\n  setData = () => {\n    fetch(`http://140.123.97.228:8000/data?q=${this.state.query}`)\n      .then(res => res.json())\n      .then((result) => {\n        console.log(result)\n        result = result.map((val, idx) => {\n          let content = val.split('@content:')[1].split('\\n')[0]\n          let book = val.split('@book:')[1].split('\\n')[0]\n          let chap = val.split('@chap:')[1].split('\\n')[0]\n          let verse = val.split('@verse:')[1].split('\\n')[0]\n          \n          return {\n            key: idx,\n            id: `${book}${chap}:${verse}`,\n            content: content\n          }\n        })\n\n\n        this.setState({ data: result })\n      })\n  }\n\n  render() {\n    const { Header, Content } = Layout;\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <div className=\"logo\"><font color=\"white\">Bible Parsing</font></div>\n        </Header>\n        <Content>\n          <Row>\n            <Col span={12}>\n              <Input placeholder=\"輸入搜尋字串\" onChange={e => this.setState({query: e.target.value})}/>\n              \n            </Col>\n            <Col span={3}>\n              <Button type=\"primary\" onClick={this.setData}>搜尋</Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={24}>\n              <Table columns={this.getColumns()} dataSource={this.state.data}/>\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}